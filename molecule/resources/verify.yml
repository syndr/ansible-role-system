---
# Verify that the role being tested has done what it's supposed to

- name: Verify
  hosts: molecule
  vars:
    ansible_user: molecule_runner
  tasks:
    - name: Load system facts
      ansible.builtin.setup:
        gather_subset:
          - "!all"
          - "!min"
          - distribution

    - name: Add compatibility options for legacy OS
      when: >-
        ansible_distribution == 'Amazon' and ansible_distribution_major_version == '2' or
        ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7'
      ansible.builtin.set_fact:
        ## This is set here because AL2 doesn't support the default values which use the Include directive
        system_sshd_config_defaults:
          AuthorizedKeysFile: .ssh/authorized_keys
        ansible_python_interpreter: /usr/local/bin/python3.10

    - name: Verify environment variables
      block:
        - name: Load user env var
          ansible.builtin.command:
            cmd: bash -i -c "echo $I_AM_ROBOT"
          changed_when: false
          register: __ci_user_env_var

        - name: Load system env var
          ansible.builtin.command:
            cmd: bash -i -c "echo $TZ"
          changed_when: false
          register: __ci_system_env_var

        - name: Validate env vars
          ansible.builtin.assert:
            that:
              - __ci_user_env_var.stdout | trim == "true"
              - __ci_system_env_var.stdout | trim == "UTC"
            fail_msg: "Environment variables are not set as expected!"
            success_msg: "Environment variables are set as expected."

    - name: Validate setting path works
      block:
        - name: Attempt to run PATH test script in a login shell
          ansible.builtin.shell:
            cmd: bash -l path_test.sh
          register: __ci_path_test
          changed_when: false

        - name: Validate PATH test script output
          ansible.builtin.assert:
            that:
              - __ci_path_test.stdout == "Durp!"
            fail_msg: "PATH test script did not output as expected! Output: {{ __ci_path_test.stdout }}"
            success_msg: "PATH test script output is as expected!"

    - name: Verify Python virtual environment
      block:
        - name: Check that venv directory exists
          ansible.builtin.stat:
            path: /opt/ansible-venv
          register: __ci_venv_dir

        - name: Verify venv directory exists
          ansible.builtin.assert:
            that:
              - __ci_venv_dir.stat.exists | default(false)
              - __ci_venv_dir.stat.isdir | default(false)
            fail_msg: |
              Virtual environment directory does not exist or is not a directory at /opt/ansible-venv
              - exists: {{ __ci_venv_dir.stat.exists | default('N/A') }}
              - is directory: {{ __ci_venv_dir.stat.isdir | default('N/A') }}
              - path checked: /opt/ansible-venv
            success_msg: "Virtual environment directory exists!"

        - name: Check that venv Python interpreter exists
          ansible.builtin.stat:
            path: /opt/ansible-venv/bin/python
          register: __ci_venv_python

        - name: Verify venv Python interpreter exists and is executable
          ansible.builtin.assert:
            that:
              - __ci_venv_python.stat.exists | default(false)
              - __ci_venv_python.stat.executable | default(false)
            fail_msg: |
              Virtual environment Python interpreter does not exist or is not executable
              - exists: {{ __ci_venv_python.stat.exists | default('N/A') }}
              - executable: {{ __ci_venv_python.stat.executable | default('N/A') }}
              - mode: {{ __ci_venv_python.stat.mode | default('N/A') }}
              - path checked: /opt/ansible-venv/bin/python
            success_msg: "Virtual environment Python interpreter exists and is executable!"

        - name: Verify venv ownership and permissions
          ansible.builtin.assert:
            that:
              - __ci_venv_dir.stat.pw_name | default('') == "root"
              - __ci_venv_dir.stat.gr_name | default('') == "root"
              - __ci_venv_dir.stat.mode | default('') == "0755"
            fail_msg: |
              Virtual environment ownership or permissions are incorrect
              - Expected owner: root, Actual: {{ __ci_venv_dir.stat.pw_name | default('N/A') }}
              - Expected group: root, Actual: {{ __ci_venv_dir.stat.gr_name | default('N/A') }}
              - Expected mode: 0755, Actual: {{ __ci_venv_dir.stat.mode | default('N/A') }}
            success_msg: "Virtual environment ownership and permissions are correct!"

        - name: Check installed packages in venv
          ansible.builtin.shell:
            cmd: /opt/ansible-venv/bin/python -m pip list --format=json
          register: __ci_venv_packages
          changed_when: false

        - name: Parse venv packages
          ansible.builtin.set_fact:
            __ci_venv_packages_list: "{{ __ci_venv_packages.stdout | from_json | map(attribute='name') | map('lower') | list }}"

        - name: Verify base packages are installed in venv
          ansible.builtin.assert:
            that:
              - "'requests' in __ci_venv_packages_list | default([])"
              - "'pyyaml' in __ci_venv_packages_list | default([])"
              - "'jinja2' in __ci_venv_packages_list | default([])"
            fail_msg: |
              Not all expected packages are installed in venv
              - Expected packages: ['requests', 'pyyaml', 'jinja2']
              - Actual packages found: {{ __ci_venv_packages_list | default([]) }}
              - Missing: {{ ['requests', 'pyyaml', 'jinja2'] | difference(__ci_venv_packages_list | default([])) }}
            success_msg: "All expected base packages are installed in venv!"

        - name: Verify venv Python can import installed packages
          ansible.builtin.command:
            cmd: /opt/ansible-venv/bin/python -c "import requests, yaml, jinja2; print('SUCCESS')"
          register: __ci_venv_import_test
          changed_when: false
          failed_when: __ci_venv_import_test.rc != 0 or __ci_venv_import_test.stdout.strip() != 'SUCCESS'
